#+TITLE: Why *nix?
#+OPTIONS: title:nil

#+BEGIN_EXPORT html
<div class="navigation">
  <div class="logo">
    <img src="images/IMG_5575.png" width="auto" height="150px" alt="Tylerdback Coding"/>
  </div>
  <div class="Menu">
    <h1> Why *nix? </h1>
    <div class="button">
      <a href="blog.html">Blog Home</a>
    </div>
  </div>
</div>
#+END_EXPORT

Date: Mar 21, 2023

As someone who daily drives Arch, a Linux "[[https://en.wikipedia.org/wiki/Linux_distribution][distro]]" notorious for its difficult installation, maintenance, and overall a less user-friendly experience than something like Ubuntu (Arch prides itself on being user-centric, very much so embracing a "Read the f***ing manual" philosophy), you might be surprised to know that I've only known about Linux for the past four years of my life. During my senior year of high school I took an AP Computer Science course. My teacher had a small Linux box in the corner of the classroom that students could freely use and mess around with. At the time I thought nothing of it, and continued to use my Windows laptop or desktop to complete my classwork, play videogames with friends, or just to browse the web. In fact, my first experience with actually "using" Linux was no more than three years ago, during my freshman year of college. One of my classes required me to install CentOS 7, a community-driven (and sadly now deprecated) distribution that tracked behind RHEL, or Red Hat Enterprise Linux. It was essentially the "free" version of RHEL, in comparison to the upstream source for RHEL, Fedora Linux. After fighting my way through the installation process in VMWare (which proved quite challenging for someone who's never used or even /heard/ of a virtual machine before) I was greeted by CentOS's desktop. To be honest, I wasn't really too impressed. I had seen and used a GUI before. I mean, most modern computers have them right? What's so cool about /this/ operating system? But then, following the steps in one of my labs, I was instructed to launch the terminal.

=NOTE=: /If you are curious about the various Linux distributions available to download and use, you can find a list of major distributions on [[https://distrowatch.com/dwres.php?resource=major][DistroWatch.com]]. To find a timeline of all Linux distributions, look [[https://commons.wikimedia.org/wiki/File:Linux_Distribution_Timeline.svg][here]]./

Needless to say, I was hooked from the very beginning. Even the mere thought that I could do *anything* from the terminal just by typing in a few commands completely blew my mind. For the first time, I felt like I was in complete control of the computer (and that I was).

I know it sounds quite cheesy, but it's true. Having grown up with few electronics in the house (my family didn't have access to cable or the internet until I was in the sixth grade), I was always jumping at the first opportunity to use them. I was addicted to using computers, but mostly for playing games. I grew up playing on systems like the Nintendo Wii and Microsoft's Xbox 360, so most of my thought-process revolved around playing videogames in my free time. So naturally when I got ahold of my first ever "gaming" laptop when I was a junior in high school (after years of saving up, buying and returning a crap Dell desktop, etc.), I only wanted to play videogames. But I still loved using technology for other things, such as CAD drawing or writing simple programs in my first ever programming language, [[https://processing.org][Processing]]. Oh, and of course customization. I spent far too many hours looking for the perfect background image, moving around my desktop icons and changing taskbar settings. I wanted things to be *perfect*, and I have always put my workflow and system configuration near (or arguably at) the top of my list of importance. I firmly believe that if you aren't comfortable with your computer and have things set up exactly how /you/ want them to be, you won't be able to get work done. After all, PC stands for /personal/ computer, right? When looking back, if I could describe Windows in one word, I would say "limited". Now, before you get all up in arms to defend your /beloved/ operating system, let me set the record straight. I don't think that Microsoft Windows is a terrible operating system. In fact, I really enjoyed using (for what little time I did) Windows 7. Windows 10 is quite a different story: blue screens, driver issues, and (brace yourselves) updates. But again, I don't *hate* the OS. It just simply didn't work the way that I wanted it too. If I wanted to move the task bar to the center of the screen (for whatever reason), there was no easy way to do that. In fact, I would probably break Windows in the process which would lead to a re-install. I have hope for Windows 11, but I haven't found anything too impressive while using it as a home media server on my busted-up MSI laptop (remember that "gaming" laptop from junior year?). In fact, I think the one thing that actually prevents me from using Linux (or any *nix OS for the matter) on that particular system is that I also use Rufus, a Windows-exclusive software, for flashing ISOs onto my USBs (so I could install Arch, Fedora, etc. on my other systems). That, and I also like having at least one of every "major" OS just for convenience. And I haven't even mentioned my MacBook yet. So while I was perfectly content at the time with Windows, I was always left wanting more out of my system.

Fast forward a year, and I was now a sophmore (and a half), entering my second year at University. For the most part I had stopped playing a majority of videogames, aside from /Mario Kart/ tournaments and /Until Dawn/ playthroughs with my then-roommate Ty. At that point I had very little exposure to *nix operating systems, only having used CentOS 7 and Kali Linux for class, and messing around with some settings in the Ubuntu graphical system menus. To be more precise, I had little experience with the terminal, knowing only a few common commands such as =ls= and the infamous =rm -rf /*=. I had also begun to write Python programs in my free time, on Windows 10 of course. It is safe to say that I was very much a computer novice, or more simply put, a "noob".

One day, while working on a Microsoft Word document (I know, hold back the barf), my Windows PC decided to blue screen. For the (insert number greater than 5)th time in under a month! And it wasn't a nice bluescreen either; I didn't even have time to view the error codes. These bluescreens became a way of life, but I had already been debating switching to Linux to try it out as a daily driver. At first I thought it was my RAM, since I have been overclocking my sticks specifically to 3200MHz on all of my Ryzen builds (go team Red!) since I built my first computer. But I know it couldn't have been the RAM, since I specifically spec'd out my system with 3200MHz RAM since that's the max speed a Ryzen 5 3600 chip can reliably handle (with voltage bumped up to 1.35V for good measure). So naturally, I bought a MacBook. Now, I know what you are thinking. You wanted to try out Linux, so why in the world did you buy a MacBook? Two reasons. One: MacOS, specifically OS X, is a Unix-based operating system available under the BSD License. This meant I had my very own *nix terminal at my disposal. And two: after various discussions with my professors and a lot of research, I believed that purchasing a MacBook and learning OS X would be beneficial in my career as a sysadmin, penetration tester, or network engineer, whatever it may be. Countless people use OS X on their MacBooks, iMacs, etc. Almost immediately I began to mess around with various commands, and soon became acclimated with a pretty solid terminal workflow. One thing led to another, and soon I was pouring hours into customizing my prompt, installing and configuring plugins for zsh (Z Shell, Apple's default terminal post-Catalina), and hacking my days away with tools like vim or, eventually, Emacs. I'd have to give credit to two *nix hackers in particular, [[https://www.youtube.com/@GavinFreeborn][Gavin Freeborn]] and [[https://www.youtube.com/@SystemCrafters][System Crafters]], for convincing me to jump ship from Neovim and enter the "church" of Emacs. This led to me spending hours upon hours of my free time (to much the dismay of my fiancee) perfecting my configuration and essentially replacing all of OS X with Emacs. In other words, Emacs /became/ my operating system. At this point in time I had over a year of experience daily-driving OS X. But although I had access to a terminal and endless customization at my fingertips, I still felt like something was missing. For one, Apple's OS X offers virtually no customization of one's desktop environment, or DE. That being said, I spent most of the time in the terminal, so this didn't bother me much. What bothered me was that I couldn't change it, even if I /wanted/ too. Not only that, but Apple's source code was, for the most part, closed-source. Now, before you start trying to accuse me of hating on closed-source software, let me again set the record straight. I'm no stranger to using closed-source software, and I'm perfectly fine with paying for software if I believe it adds some benefit to my life. For example, I pay a "yearly" subscription to ProtonMail, since I really enjoy their mailing service platform, encrypted cloud drive, and VPN services. But when it comes to my operating system, I want to know what's going on under the hood, and more importantly, I want to be free to change it if I do so desire. And that's where Linux comes in.

=NOTE=: /The late Joe Armstrong, co-creator of Erlang (and one of my personal idols), said it best in his talk [[https://www.youtube.com/watch?v=rmueBVrLKcY][Computer Science - A Guide for the Perplexed]]: "Emacs or vi? I'm not religious about these things, I belong to the true church of Emacs"./

I truly believe that it was my exposure to Emacs that finally led me down the road of putting the MacBook aside, building another desktop, and daily driving Linux. At that point in time I had been debating with myself for nearly half a year whether or not I should build another computer. The costs of parts were obviously the downside, but in the end it was my determination to use Linux, and the absolute joy I feel when building computer hardware and tweaking BIOS settings, that won me over. To be honest, my transition over to Linux was quite a rocky start. After assembling my new computer, I spent *days* trying to find a distro that worked for me. My first attempt was with Fedora Server 37, a lightweight, stable, rolling release distribution. I chose it because I wanted something that was close to the bleeding edge, but at the same time stable enough where I wouldn't have to think twice before running a system update. Unfortunately, as you may have guessed, things didn't go well. Fedora Server wasn't behaving well with my BIOS configuration (something about secure boot that I figured out much later when installing Arch) and graphics drivers weren't installing from the RPM repositories properly. After nearly 12 hours of frustration (and a brief attempt at driving Ubuntu Server, which was a whole other story) I felt like giving up on the whole "build your system from scratch". In fact, I did give up, and instead opted to install Mint (Workstation Edition), one of the most reliable operating systems I have used to date. Mint felt familiar, with its Cinnamon DE being reminiscent of that of Windows. However, I was quick to forgo the DE altogether and opted to solely running bspwm, a tiling window manager that allowed me to write my own custom keybinds (in tandem with sxhkd) for window navigation, volume/brightness control, etc. At that point I was happy: I had a stable configuration and endless control of my operating systems look, feel, and access to the kernel.

=NOTE=: /If you're curious as to what my Linux Mint configuration looked like, I still have the repository on [[https://github.com/Tdback/Mint][GitHub]]. Keep in mind that I was fairly new to daily driving Linux and "building my system from the ground up", so the repository may feel incomplete. For a more complete configuration, look to my [[https://github.com/Tdback/Arch][Arch]] dotfiles./

After about a week or two of daily-driving Mint, an all too familiar feeling began to creep its way back into my thoughts. Something was missing, and I just couldn't put my finger on it. As good as an operating system that it was, Mint still felt like I didn't have complete control. Apt, the package installer, felt like a mess and I wasn't all too keen on adding countless repositories manually just to access programs I used daily, like the Alacritty terminal or Brave browser. [[https://github.com/volitank/nala][Nala]], a front-end wrapper for apt, alleviated some of the grievances I had with the system, but nothing could get me past the sheer number of programs installed alongside the desktop environment. My issue here lied with how one could install Mint. There was no server option, which meant you had to choose between several different DEs and then manually uninstall them, which could lead to a broken system as apt wasn't all that great at removing programs and dependencies. It was at that moment that I knew if I wanted to have complete control over my system /and/ the progams that ran on it, I had to give Arch a shot. And when it comes to technology, it was one of the best decisions I've ever made.

Now, I won't go into too much detail about configuring Arch. Essentially, in order to use Arch Linux, you have to install the operating system yourself, in the terminal. The Arch Wiki has an [[https://wiki.archlinux.org/title/Installation_guide][installation guide]], which I'll link for those who want to give it a shot (which I highly recommend). After installing the operating system, which took me roughly half an hour to 45 minutes, I was presented with a black terminal screen. And that was it, Arch was installed and running. Yes, you're thinking about that right: Arch has no GUI (graphical user interface) out of the box. It's just you and a [[https://en.wikipedia.org/wiki/Computer_terminal][tty]]. Although it didn't take me too long to get bspwm installed (and a few other essential programs), after months of tinkering I still have yet to stop customizing my operating system. Every day I find something new to tweak or improve, or sometimes when I run into a problem that annoys me, I write my own custom functions to take care of it! For example, my keyboard's default repeat delay was a bit too high for my liking. Something in the 400-500ms or higher, I'm not 100% sure. So to fix that, I wrote a little script to decrease the delay time and increase the repeat rate per millisecond. I added that into another script I wrote that handles launching scripts on startup, so each time I power on (or restart) my system, the keyboard's repeat delay is automatically adjusted to my liking. And guess what, that took me maybe two minutes to do, including the time to read the xset man page to figure out how the command worked! Some may think that spending hours upon hours customizing your system is a waste of time, and to that I say, "Okay". I get it, it's not for everyone. But to me it's not waste of time, and it's something I genuinely love spending my free time on.

Frankly, it doesn't matter if you see a computer as nothing more than just a couple of parts thrown together to let you browse the web or play games. To me, it's much more than a computer. Computers are a way I can express my personality and share my knowledge. Linux, to me, is a completely different way to look at computing. Sure, on Windows you could have access to a wide assortment of games and applications ready to install, no extra steps needed. But the customization is quite limited: you can't do much more than move around your taskbar or change the look of your cursor. But with Linux, it can truly be anything /you/ want it to be. Right down to the 1s and 0s. I love Linux, and I hope you can learn to love it too :)

Until next time, happy hacking!
