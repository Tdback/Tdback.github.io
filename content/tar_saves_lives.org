#+TITLE:Learn Tar
#+OPTIONS: title:nil

#+BEGIN_EXPORT html
<div class="navigation">
  <div class="logo">
    <img src="images/IMG_5575.png" width="auto" height="150px" alt="Tylerdback Coding"/>
  </div>
  <div class="Menu">
    <h1> Learn tar </h1>
    <div class="button">
      <a href="blog.html">Blog Home</a>
    </div>
  </div>
</div>
#+END_EXPORT

Date: Sat, Jul 29 2023

It's recently come to my attention that many of my peers in my university's cyber-security program are unfamiliar with the =tar= command available on Linux, BSD, and Unix systems. I made this discovery shortly after sharing comic 1168 from [[https://xkcd.com/][xkcd]] to the program's Discord channel.

Here's the comic:

[[./images/tar.png]]

For those unfamiliar with the =tar= command, the idea of the joke here is that the command has oftentimes complex syntax. Let me give you an example:

#+BEGIN_EXPORT html
<div class="src src-shell">
  <div class="highlight">
    <code class="language-shell" data-lang="shell"><span style="display:flex;"> 
XZ_OPT='-T4' tar cvJf my_files.tar.xz my_files/
</code></pre></div>
</div>
#+END_EXPORT

If you just read that and have no idea what any of it meant, you're in the right place. It's time you learn about =tar=!

Simply put, =tar= is *the* archiving utility for Unix-based systems. =tar= stands for "tape archive" and was designed to store multiple files in a single file (known as an "archive" or "tarball"), and to manipulate such archives.

There is an important distinction to make here: creating an archive with =tar= is *not* the same as compressing a file with a compression utility such as =gzip= or =xz=. =tar= simply collects a group of files, for example several directories and their contents, and creates an archive. In fact, if you looked at the size of the resulting archive, or tarball, it would be close to (if not exactly) the same number of bytes as the sum of all the files you created the archive from.

But why does this distinction matter? =tar= in fact has built-in support for compressing your archives, and by using additional flags (or command-line arguments) the user can compress an archive of hundreds to thousands of directories in a single command, resulting in a compressed archive a 10th of the size of the original archive! The resulting size is of course dependent on the compression method you're using, but that's beyond the scope of this discussion. This makes =tar= perfect for storing backups, sending large quantities of files to colleagues, and more!

Let's explore some simple examples you may encounter in your everyday use!

In the following scenario, we want to send a directory containing several documents to our friends. First we'll create our archive!

#+BEGIN_EXPORT html
<div class="src src-shell">
  <div class="highlight">
    <code class="language-shell" data-lang="shell"><span style="display:flex;"> 
tar cf my_files.tar my_files/
</code></pre></div>
</div>
#+END_EXPORT

Let's break this command down:

Our command begins with calling the =tar= program. We then pass our command-line options, =c= and =f=, telling =tar= that we want to *create* a new tar archive and that the following string is the archive we want to create, in this case =my_files.tar=. Then we pass in the directory of files we want to create an archive from, =my_files/=.

It is important to note that we could have passed our command-line arguments to =tar= in several ways:

#+BEGIN_EXPORT html
<div class="src src-shell">
  <div class="highlight">
    <code class="language-shell" data-lang="shell"><span style="display:flex;"> 
tar -cf my_files.tar my_files/
</code></pre></div>
</div>
#+END_EXPORT

#+BEGIN_EXPORT html
<div class="src src-shell">
  <div class="highlight">
    <code class="language-shell" data-lang="shell"><span style="display:flex;"> 
tar -c -f my_files.tar my_files/
</code></pre></div>
</div>
#+END_EXPORT

#+BEGIN_EXPORT html
<div class="src src-shell">
  <div class="highlight">
    <code class="language-shell" data-lang="shell"><span style="display:flex;"> 
tar --create --file my_files.tar my_files/
</code></pre></div>
</div>
#+END_EXPORT

All four commands produce the same result, and the differences are simply available due to POSIX compliance and GNU standards. It is entirely up to the user on how they want to pass arguments, but the differences *do* matter when using tar within shell scripts. For the rest of the examples we'll stick to the style used in the original example.

Running our command resulted in an archive =my_files.tar=, which we can send to our friends! But wait a minute, why would we send them an archive if it's the same size as just sending all of the files individually? We need compression!

#+BEGIN_EXPORT html
<div class="src src-shell">
  <div class="highlight">
    <code class="language-shell" data-lang="shell"><span style="display:flex;"> 
tar cvzf my_files.tar.gz my_files/
</code></pre></div>
</div>
#+END_EXPORT

The keen of eye will notice that we've passed in two more arguments when calling =tar= to create our compressed archive. =v=, or =--verbose= increases the "verbosity" of the tar command, and prints out to the terminal what files it's adding to the archive. We could have also used =v= in our original example to see exactly what files were being added to our archive. To compress the archive we use the =z=, or =--gzip=, flag, which tells tar to use the =gzip= utility to compress the tarball. This is also why we named our resulting file =my_files.tar.gz= to indicate that we created a compressed tarball (several other extensions are also supported, for example =.tgz=). We could have instead used =J= to create a compressed tarball using the =xz= utility, another compression tool, but for simplicity's sake we'll stick to using =gzip=.

Perfect! Now we have a compressed tarball containing all the documents we want to send to our friends! We upload it to the server using =rsync= and wait for our friends to pull down the documents. You sign out of your computer and head to bed for the night. 

A few hours pass and our friends go to pull down the compressed tarball from the server. However, they notice that there's two similarly named files: =my_files.tar.gz= and =files.tar.gz=. You forgot to tell them the filename, so how will they know which one contains the documents? Your friends don't want to extract both archives, because one of them could contain thousands of directories and files. Lucky for them, =tar= has built-in support for viewing the contents of a compressed tarball. Pretty awesome, right?

#+BEGIN_EXPORT html
<div class="src src-shell">
  <div class="highlight">
    <code class="language-shell" data-lang="shell"><span style="display:flex;"> 
tar tvf my_files.tar.gz 
</code></pre></div>
</div>
#+END_EXPORT

Here, we use =t=, or =--test-label= to test the archive volume label and exit. Unlike before, where =v= was optional to let us get a better idea of what files were being added to the archive, =v= is required if we want to see what files are inside the compressed tarball. Using this command, your friends are able to see that =my_files.tar.gz= contains all the documents you wanted to send to them. Let's decompress and extract the archive!

You'll notice here that I said decompress *and* extract. Remember: =tar= at its simplest form creates an archive of files, which is different than compression. To extract a simple tarball similar to what we created in the first example we can run the following:

#+BEGIN_EXPORT html
<div class="src src-shell">
  <div class="highlight">
    <code class="language-shell" data-lang="shell"><span style="display:flex;"> 
tar xvf my_files.tar
</code></pre></div>
</div>
#+END_EXPORT

=x=, or =--extract= or =--get=, is used to extract the contents of the tarball. Again, =v= is not necessary here. It is simply used for extra verbosity when the =tar= command runs. This command creates the =my_files/= directory in the user's current directory, containing the contents we had added to the archive in the first example. But we compressed our archive before sending it to our friends, meaning they need to decompress the archive before extracting its contents. =tar= is actually smart enough to recognize that the tarball is compressed, and simply running the same command on =my_files.tar.gz= will both decompress and extract the archive. However, there is a more "appropriate" way to decompress and extract this archive:

#+BEGIN_EXPORT html
<div class="src src-shell">
  <div class="highlight">
    <code class="language-shell" data-lang="shell"><span style="display:flex;"> 
tar xzvf my_files.tar
</code></pre></div>
</div>
#+END_EXPORT

Similar to when we created the =gzip= archive, we can use =z= (=--gunzip= in this example) alongside =x= to decompress and extract the file's contents. Now your friends can access the documents you wanted to send them!

These examples were not to serve as a holistic guide to =tar=: there are still various flags that I have yet to mention. If you're curious to learn more about =tar=, I highly suggest you read through the =man= and =info= pages on your Unix-based system. Although you didn't learn everything that =tar= has to offer, reading through this guide should have given you enough knowledge to add =tar= to your terminal toolbox for everyday use. And unlike Rob, you might even save the world someday :)

Hack away, hack away my friends. 


